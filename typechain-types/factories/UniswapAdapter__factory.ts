/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  UniswapAdapter,
  UniswapAdapterInterface,
} from "../UniswapAdapter";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "addressFactory",
        type: "address",
      },
      {
        internalType: "address",
        name: "_addressRouter",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountA",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountB",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
    ],
    name: "addLiquidity",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "createPair",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
    ],
    name: "getPair",
    outputs: [
      {
        internalType: "address",
        name: "pair",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenA",
        type: "address",
      },
      {
        internalType: "address",
        name: "tokenB",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amountOutMin",
        type: "uint256",
      },
    ],
    name: "swap",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200139a3803806200139a833981810160405281019062000037919062000118565b816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620001a7565b60008151905062000112816200018d565b92915050565b600080604083850312156200012c57600080fd5b60006200013c8582860162000101565b92505060206200014f8582860162000101565b9150509250929050565b600062000166826200016d565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001988162000159565b8114620001a457600080fd5b50565b6111e380620001b76000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80634b2fc7bb14610051578063c9c653961461006d578063e6a4390514610089578063fe029156146100b9575b600080fd5b61006b60048036038101906100669190610c30565b6100d5565b005b61008760048036038101906100829190610b91565b610428565b005b6100a3600480360381019061009e9190610b91565b610655565b6040516100b09190610e12565b60405180910390f35b6100d360048036038101906100ce9190610bcd565b6106fc565b005b8473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161011293929190610e56565b602060405180830381600087803b15801561012c57600080fd5b505af1158015610140573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101649190610ce8565b508373ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b81526004016101a293929190610e56565b602060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f49190610ce8565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401610252929190610f0b565b602060405180830381600087803b15801561026c57600080fd5b505af1158015610280573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102a49190610ce8565b508373ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16846040518363ffffffff1660e01b8152600401610302929190610f0b565b602060405180830381600087803b15801561031c57600080fd5b505af1158015610330573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103549190610ce8565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663e8e3370086868686600080886103e8426103a99190611018565b6040518963ffffffff1660e01b81526004016103cc989796959493929190610e8d565b606060405180830381600087803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061041e9190610d11565b5050505050505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663c9c6539684846040518363ffffffff1660e01b8152600401610486929190610e2d565b602060405180830381600087803b1580156104a057600080fd5b505af11580156104b4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d89190610b68565b905080600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905092915050565b6000600267ffffffffffffffff81111561073f577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561076d5781602001602082028036833780820191505090505b50905084816000815181106107ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508381600181518110610820577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166323b872dd3330866040518463ffffffff1660e01b815260040161089793929190610e56565b602060405180830381600087803b1580156108b157600080fd5b505af11580156108c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e99190610ce8565b508473ffffffffffffffffffffffffffffffffffffffff1663095ea7b3600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16856040518363ffffffff1660e01b8152600401610947929190610f0b565b602060405180830381600087803b15801561096157600080fd5b505af1158015610975573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109999190610ce8565b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166338ed1739848484336103e8426109ea9190611018565b6040518663ffffffff1660e01b8152600401610a0a959493929190610f34565b600060405180830381600087803b158015610a2457600080fd5b505af1158015610a38573d6000803e3d6000fd5b505050506040513d6000823e3d601f19601f82011682018060405250810190610a619190610ca7565b505050505050565b6000610a7c610a7784610fb3565b610f8e565b90508083825260208201905082856020860282011115610a9b57600080fd5b60005b85811015610acb5781610ab18882610b53565b845260208401935060208301925050600181019050610a9e565b5050509392505050565b600081359050610ae481611168565b92915050565b600081519050610af981611168565b92915050565b600082601f830112610b1057600080fd5b8151610b20848260208601610a69565b91505092915050565b600081519050610b388161117f565b92915050565b600081359050610b4d81611196565b92915050565b600081519050610b6281611196565b92915050565b600060208284031215610b7a57600080fd5b6000610b8884828501610aea565b91505092915050565b60008060408385031215610ba457600080fd5b6000610bb285828601610ad5565b9250506020610bc385828601610ad5565b9150509250929050565b60008060008060808587031215610be357600080fd5b6000610bf187828801610ad5565b9450506020610c0287828801610ad5565b9350506040610c1387828801610b3e565b9250506060610c2487828801610b3e565b91505092959194509250565b600080600080600060a08688031215610c4857600080fd5b6000610c5688828901610ad5565b9550506020610c6788828901610ad5565b9450506040610c7888828901610b3e565b9350506060610c8988828901610b3e565b9250506080610c9a88828901610ad5565b9150509295509295909350565b600060208284031215610cb957600080fd5b600082015167ffffffffffffffff811115610cd357600080fd5b610cdf84828501610aff565b91505092915050565b600060208284031215610cfa57600080fd5b6000610d0884828501610b29565b91505092915050565b600080600060608486031215610d2657600080fd5b6000610d3486828701610b53565b9350506020610d4586828701610b53565b9250506040610d5686828701610b53565b9150509250925092565b6000610d6c8383610d78565b60208301905092915050565b610d818161106e565b82525050565b610d908161106e565b82525050565b6000610da182610fef565b610dab8185611007565b9350610db683610fdf565b8060005b83811015610de7578151610dce8882610d60565b9750610dd983610ffa565b925050600181019050610dba565b5085935050505092915050565b610dfd816110b6565b82525050565b610e0c816110ac565b82525050565b6000602082019050610e276000830184610d87565b92915050565b6000604082019050610e426000830185610d87565b610e4f6020830184610d87565b9392505050565b6000606082019050610e6b6000830186610d87565b610e786020830185610d87565b610e856040830184610e03565b949350505050565b600061010082019050610ea3600083018b610d87565b610eb0602083018a610d87565b610ebd6040830189610e03565b610eca6060830188610e03565b610ed76080830187610df4565b610ee460a0830186610df4565b610ef160c0830185610d87565b610efe60e0830184610e03565b9998505050505050505050565b6000604082019050610f206000830185610d87565b610f2d6020830184610e03565b9392505050565b600060a082019050610f496000830188610e03565b610f566020830187610e03565b8181036040830152610f688186610d96565b9050610f776060830185610d87565b610f846080830184610e03565b9695505050505050565b6000610f98610fa9565b9050610fa482826110c8565b919050565b6000604051905090565b600067ffffffffffffffff821115610fce57610fcd611128565b5b602082029050602081019050919050565b6000819050602082019050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b6000611023826110ac565b915061102e836110ac565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115611063576110626110f9565b5b828201905092915050565b60006110798261108c565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b60006110c1826110ac565b9050919050565b6110d182611157565b810181811067ffffffffffffffff821117156110f0576110ef611128565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b6111718161106e565b811461117c57600080fd5b50565b61118881611080565b811461119357600080fd5b50565b61119f816110ac565b81146111aa57600080fd5b5056fea26469706673582212200f45c1155617d9ce1a89042aa3ff0dffa01f80fe786c9ac759f1f5dfcbd73eb864736f6c63430008040033";

type UniswapAdapterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: UniswapAdapterConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class UniswapAdapter__factory extends ContractFactory {
  constructor(...args: UniswapAdapterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "UniswapAdapter";
  }

  deploy(
    addressFactory: string,
    _addressRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<UniswapAdapter> {
    return super.deploy(
      addressFactory,
      _addressRouter,
      overrides || {}
    ) as Promise<UniswapAdapter>;
  }
  getDeployTransaction(
    addressFactory: string,
    _addressRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      addressFactory,
      _addressRouter,
      overrides || {}
    );
  }
  attach(address: string): UniswapAdapter {
    return super.attach(address) as UniswapAdapter;
  }
  connect(signer: Signer): UniswapAdapter__factory {
    return super.connect(signer) as UniswapAdapter__factory;
  }
  static readonly contractName: "UniswapAdapter";
  public readonly contractName: "UniswapAdapter";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): UniswapAdapterInterface {
    return new utils.Interface(_abi) as UniswapAdapterInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): UniswapAdapter {
    return new Contract(address, _abi, signerOrProvider) as UniswapAdapter;
  }
}
